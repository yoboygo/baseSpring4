<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:p="http://www.springframework.org/schema/p"
     xsi:schemaLocation="
	     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
	     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	
	<bean id="waiterTarget" class="tk.codecube.test.aop.springcore.entry.Waiter"/>
	<bean id="sellerTarget" class="tk.codecube.test.aop.springcore.entry.Seller"/>
	<bean id="greetingAdvice" class="tk.codecube.test.aop.springcore.GreetingBeforeAdvice"/>
	<bean id="greetingAdvisor" class="tk.codecube.test.aop.springcore.GreetingAdvisor">
		<property name="advice" ref="greetingAdvice" />  
	</bean>
	
<!-- 	static 静态方法AOP切面 -->
	<bean id="parent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="greetingAdvisor"
		p:proxyTargetClass="true"/>
	<bean id="waiter" parent="parent" p:target-ref="waiterTarget"/>
	<bean id="seller" parent="parent" p:target-ref="sellerTarget"/>
	
<!-- 	正则表达式 切面-->
	<bean id="regexpAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"
		p:advice-ref="greetingAdvice">
		<property name="patterns">
			<list>
				<value>.*greet.*</value>
			</list>
		</property>
	</bean>
	<bean id="waiterRegx" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="regexpAdvisor"
		p:target-ref="waiterTarget"
		p:proxyTargetClass="true"/>
	
<!-- 	动态切面 -->
	<bean id="dynamicAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut">
			<bean class="tk.codecube.test.aop.springcore.GreetingDynamicPointcut"></bean>
		</property>
		<property name="advice" ref="greetingAdvice"></property>
	</bean>
	<bean id="waiterDynamic" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="dynamicAdvisor"
		p:target-ref="waiterTarget"
		p:proxyTargetClass="true"/>
		
<!-- 	流程切面 -->
	<bean id="controlFlowPointcut" class="org.springframework.aop.support.ControlFlowPointcut">
		<constructor-arg type="java.lang.Class" value="tk.codecube.test.aop.springcore.entry.WaiterDelegate"></constructor-arg>
		<constructor-arg type="java.lang.String" value="service"></constructor-arg>
	</bean>
	<bean id="controlFlowAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut" ref="controlFlowPointcut"/>
		<property name="advice" ref="greetingAdvice"/>
	</bean>
	<bean id="waiterFlow" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="controlFlowAdvisor"
		p:target-ref="waiterTarget"
		p:proxyTargetClass="true"/>
<!-- 	复合切面 -->
<!-- 	<bean id="gcp" class="tk.codecube.test.aop.springcore.GreetingComposablePointcut"></bean> -->
<!-- 	<bean id="composableAdvidor" class="org.springframework.aop.support.DefaultPointcutAdvisor"> -->
<!-- 		<property name="pointcut" ref="#{gcp.instersectionPointcut}"/> -->
<!-- 		<property name="advice" ref="greetingAdvice"/> -->
<!-- 	</bean> -->
<!-- 	<bean id="waiterComposable" class="org.springframework.aop.framework.ProxyFactoryBean" -->
<!-- 		p:interceptorNames="composableAdvidor" -->
<!-- 		p:target-ref="waiterTarget" -->
<!-- 		p:proxyTargetClass="true"/> -->
  
<!--   自动创建切面 -->
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames"><value>*Target</value></property>
		<property name="interceptorNames"><value>greetingAdvice</value></property>
		<property name="optimize"><value>true</value></property>
	</bean>
	
 </beans>